# 🗽 NYC Crime Data Analysis Project

## 📘 Overview
This project explores crime patterns across New York City using **SQL, Python (Pandas, Plotly, Matplotlib)**, and **Jupyter Notebook**.  
It analyzes the NYPD Complaint Dataset to uncover key trends related to:
- Offense types  
- Victim demographics  
- Suspect information  
- Borough-based crime distribution  

The project also demonstrates **collaborative development with Git and GitHub**, including branching, merging, and version control best practices.

---

## 🎯 Project Objectives
1. **Identify major crime trends** across New York City by offense type and borough.  
2. **Analyze demographic insights** — focusing on victim gender and suspect age group patterns.  
3. **Build interactive visualizations** (Pie, Sunburst, Donut, Bubble Charts) for clear interpretation of results.  

---

## 🧠 Technologies Used
- **Python**: Data analysis and visualization  
- **SQLite / PostgreSQL**: Querying NYPD dataset  
- **Jupyter Notebook**: Analysis and presentation  
- **Plotly & Matplotlib**: Interactive and static visualizations  
- **Git & GitHub**: Collaboration and version control  

---

## 🧩 Dataset
The dataset comes from the **NYC Open Data portal (NYPD Complaint Data)**, containing records of reported crimes including:
- `OFNS_DESC`: Offense description  
- `VIC_SEX`: Victim gender  
- `SUSP_AGE_GROUP`: Suspect age group  
- `BORO_NM`: Borough name  
- `KY_CD`: Complaint category  

---

## 📊 Key SQL Queries
Some of the major analyses performed:
- Crimes by Offense Type  
- Crimes by Borough  
- Victim Sex vs Borough  
- Suspect Age vs Borough  
- Complaint Description Breakdown  

---

## 📈 Visualizations
Visual insights include:
- 📊 **Bar Chart:** Crimes by Offense Type  
- 🥧 **Pie Chart:** Offense Distribution by Borough  
- 🌞 **Sunburst Chart:** Victim Sex vs Borough  
- 💬 **Bubble Chart:** Suspect Age Group vs Borough  

Each visualization was created with **Plotly Express** for interactivity and easy exploration within Jupyter Notebook.

---

## 🤝 Collaborative Development with Git
This project was collaboratively developed by a small team using **Git and GitHub**.

### Steps followed:
1. **Initialize the repository**
   ```python
   !git init
   !git add .
   !git commit -m "Initial commit"
   ```
2. **Add a remote and push**
   ```python
   REMOTE_URL = "https://github.com/<your-username>/NYC-Analysis-Project.git"
   !git remote add origin {REMOTE_URL}
   !git branch -M main
   !git push -u origin main
   ```
3. **Branching for teamwork**
   ```bash
   git checkout -b feature-visualization
   git checkout -b feature-sql-analysis
   ```
4. **Collaborate & Merge**
   - Team members push their branch changes.
   - Merge via pull requests.
   - Resolve merge conflicts through discussion and `git merge`.

---

## ⚙️ Challenges and Solutions
| Challenge | Solution |
|------------|-----------|
| Large `.db` file exceeding GitHub’s 100MB limit | Added `.gitignore` to exclude DB file and used local references only |
| Merge conflicts due to concurrent edits | Implemented branch-based workflow and clear commit conventions |
| Visual clutter with large datasets | Used aggregation queries and interactive charts for clarity |

---

## 🚀 Future Improvements
1. **Automated ETL Pipeline** – automate daily data refresh from NYC Open Data.  
2. **Dashboard Integration** – deploy an interactive web dashboard using Dash or Streamlit.  

---

## 🧾 References
- [NYC Open Data – NYPD Complaint Data](https://data.cityofnewyork.us/)  
- [Plotly Documentation](https://plotly.com/python/)  
- [GitHub Collaboration Guide](https://docs.github.com/en/get-started/quickstart/github-flow)  

---

## 🧰 How to Run
1. Clone the repository  
   ```bash
   git clone https://github.com/<your-username>/NYC-Analysis-Project.git
   cd NYC-Analysis-Project
   ```
2. Install dependencies  
   ```bash
   pip install pandas plotly matplotlib sqlite3
   ```
3. Launch the Jupyter Notebook  
   ```bash
   jupyter notebook "NYC Analysis Project.ipynb"
   ```

---

## 👥 Contributors
- **Your Name (Takudzwa-debug)** – Data analysis, visualizations  
- **Collaborator 1** – SQL query design and data cleaning  
- **Collaborator 2** – Git management and report structuring  

